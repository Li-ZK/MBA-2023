import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import cm

"""
plot utils
"""


# load spectra bands(nm)
def load_wavelength():
    header = [393.700000, 396.900000, 400.100000, 403.200000, 406.400000, 409.600000,
              412.800000, 416.000000, 419.200000, 422.400000, 425.600000, 428.800000,
              432.000000, 435.300000, 438.500000, 441.700000, 444.900000, 448.200000,
              451.400000, 454.600000, 457.900000, 461.100000, 464.400000, 467.600000,
              470.900000, 474.100000, 477.400000, 480.700000, 483.900000, 487.200000,
              490.500000, 493.700000, 497.000000, 500.300000, 503.600000, 506.900000,
              510.200000, 513.500000, 516.800000, 520.100000, 523.400000, 526.700000,
              530.000000, 533.400000, 536.700000, 540.000000, 543.300000, 546.700000,
              550.000000, 553.300000, 556.700000, 560.000000, 563.400000, 566.700000,
              570.100000, 573.400000, 576.800000, 580.200000, 583.600000, 586.900000,
              590.300000, 593.700000, 597.100000, 600.500000, 603.800000, 607.200000,
              610.600000, 614.000000, 617.400000, 620.900000, 624.300000, 627.700000,
              631.100000, 634.500000, 637.900000, 641.400000, 644.800000, 648.200000,
              651.700000, 655.100000, 658.600000, 662.000000, 665.500000, 668.900000,
              672.400000, 675.800000, 679.300000, 682.800000, 686.200000, 689.700000,
              693.200000, 696.700000, 700.200000, 703.700000, 707.200000, 710.700000,
              714.200000, 717.700000, 721.200000, 724.700000, 728.200000, 731.700000,
              735.200000, 738.700000, 742.300000, 745.800000, 749.300000, 752.900000,
              756.400000, 760.000000, 763.500000, 767.100000, 770.600000, 774.200000,
              777.700000, 781.300000, 784.900000, 788.400000, 792.000000, 795.600000,
              799.200000, 802.800000, 806.300000, 809.900000, 813.500000, 817.100000,
              820.700000, 824.300000, 827.900000, 831.600000, 835.200000, 838.800000,
              842.400000, 846.000000, 849.700000, 853.300000, 856.900000, 860.600000,
              864.200000, 867.900000, 871.500000, 875.200000, 878.800000, 882.500000,
              886.200000, 889.800000, 893.500000, 897.200000, 900.800000, 904.500000,
              908.200000, 911.900000, 915.600000, 919.300000, 923.000000, 926.700000,
              930.400000, 934.100000, 937.800000, 941.500000, 945.200000, 949.000000,
              952.700000, 956.400000, 960.100000, 963.900000, 967.600000, 971.300000,
              975.100000, 978.800000, 982.600000, 986.400000, 990.100000, 993.900000,
              997.600000, 1001.400000]
    return header


wavelength = load_wavelength()


def plot_split_distribution(train_y, test_y):
    # tensor to list
    train_y = train_y.tolist()
    test_y = test_y.tolist()

    y_brix = train_y.copy()
    # Draw the proportion of y values in the training and testing sets
    y_brix.extend(test_y)
    bins = 0.3
    size = (int)((max(y_brix) - min(y_brix)) // bins)  # Number of intervals

    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.figure(figsize=(20, 8), dpi=80)

    plt.hist(train_y,  # data
             bins=size,
             color='blue',
             alpha=0.5,
             # edgecolor='k',
             # density=True,
             label='train set')

    plt.hist(test_y,
             bins=size,
             color='red',
             alpha=0.5,
             # edgecolor='k',
             # density=True,
             label='test set')

    plt.xticks(fontsize=25)
    plt.yticks(fontsize=25)
    plt.legend(fontsize=25)
    plt.xlabel('value', fontsize=25)
    plt.ylabel('number', fontsize=25)
    plt.title('Histogram of y-value distribution - ' + str(bins), fontsize=25)
    plt.show()


def plot_curve(X):
    wavelength = [i for i in range(X.shape[1])]
    plt.figure(figsize=(8, 5))
    ax = plt.gca()
    ax.set_ylim(0, 1, 0.1)
    with plt.style.context(('ggplot')):
        plt.plot(wavelength, X.T)
        plt.xlabel('Wavelength')
        plt.ylabel('Ref Value')
        plt.show()
